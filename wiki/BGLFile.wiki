#summary BGL File Structure
#sidebar TOC

= Introduction =

This wiki gives a quick analysis of BGL file structure. 

= Details =

==Decompression==

A BGL file has a 4-byte header.

|| *header*    || *extention* || *description*                             ||
|| 0x12340003  || .BDC        || used as cache by Babylon program          ||
|| 0x12340002  || .BGL        || generated by the builder in some cases    ||
|| 0x12340001  || .BGL        || distributed on Babylon site               ||

It is compressed by _zlib 1.1.3_.

  * The gzip header of 0x12340001 files starts at 0x47.
  * The gzip header of 0x12340002 files starts at 0x69.

_Reference_: [http://www.woodmann.com/forum/showthread.php?t=7028 discussion by acidmelt and biblio]

==After Decompression (BGLR)==

Give the decompressed file an extension *BGLR* and it is denoted as *BGLR* file from now on.

Each BGLR file is a collection of records.

Every record has 1 byte specifier:
  * The low nibble is the record type.
  * The high nibble holds indication of the record length, with the following rule:
    # high nibble>=4: subtract 4; that is the length
    # high nibble <4: add 1: that is the number of bytes for the following length (in big-endian format)
      _similar structure is used in term property_
    

So a simple function can read records from a BGLR file:
{{{
# python 3.0 compatible

def readRecord(fbglr):
    hdr=fbglr.read(1)
    if len(hdr)==0:
        return
    hdr=hdr[0]
    high_nibble=hdr>>4
    rec_type=hdr&0xF
    if rec_type==RC_EOF:
        return (rec_type,None)
    if high_nibble>=4:
        rec_len=high_nibble-4
    else:
        rec_len=parseInt(fbglr.read(high_nibble+1))
    return (rec_type,fbglr.read(rec_len))
}}}


== Record Structure ==

Currently I know 4 types of records:
||*Record Type*     ||*Value*||
||[BGLParameter RC_GLSPARAM]   || 0x0   ||
||[BGLProperty RC_GLSPROPERTY]   || 0x3   ||
||[BGLTerm RC_TERM]          || 0x1 | 0xA | 0xB ...||
||[BGLResource RC_RES]            || 0x2   ||

RC_GLSPARAM records come always first usually followed by RC_GLSPROPERTY records. A BGLR file always ends with some empty records (i.e. high nibble is 4)