#summary A basic analysis for BGL file

= Introduction =

This wiki gives a quick analysis for BGL file structure. The information is mainly from  [http://www.woodmann.com/forum/showthread.php?t=7028 acidmelt's thread]


= Details =

==BGL Decompression==

|| *header*    || *extention* || *description*                             ||
|| 0x12340003  || .BDC        || used as cache by Babylon program          ||
|| 0x12340002  || .BGL        || generated by the builder in some cases    ||
|| 0x12340001  || .BGL        || distributed on Babylon site               ||

The compression algorithm is identified by *bilbo*:
  I've managed to identify their decompression (not decryption) algorithm .... It is simply ZLIB, release 1.1.3 (rather old...). The routines are inside BabyServices.DLL, but they are called from BContentServer.DLL.


The gzip header of 0x12340001 files starts at 0x47.<br/>
The gzip header of 0x12340002 files starts at 0x69.

==Decompressed BGL (*BGR*)==

Give the decompressed file an extension bgr and it is denoted as bgr file from now on.

Again by *bilbo*:
  The uncompressed file is a collection of records.<br/>
  The low nibble is the record type.<br/>
  The high nibble holds indication of the record length, with the following rule:<br/>
    high nibble>=4: subtract 4; that is the length<br/>
    high nibble <4: add 1: that is the number of bytes for the following length (in big-endian format)<br/>

Currently I know four types of records:
||*Record Type* ||Value ||
||RC_META       || 0x0  ||
||RC_INFO       || 0x3  ||
||RC_NULL       || 0x6  ||
||RC_ENTRY      || 0x1 | 0xA | 0xB ...||
||RC_RES        || 0x2  ||
||RC_EOF        || 0x4  ||
