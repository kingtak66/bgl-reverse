#summary BGL File Structure
#sidebar TOC
* [HTMLElements HTML reference]

= Introduction =

This wiki gives a quick analysis for BGL file structure. 

= Details =

==Decompression==

A BGL file has a 4-byte header.

|| *header*    || *extention* || *description*                             ||
|| 0x12340003  || .BDC        || used as cache by Babylon program          ||
|| 0x12340002  || .BGL        || generated by the builder in some cases    ||
|| 0x12340001  || .BGL        || distributed on Babylon site               ||

It is compressed by _zlib 1.1.3_.

  * The gzip header of 0x12340001 files starts at 0x47.
  * The gzip header of 0x12340002 files starts at 0x69.

_Reference_: [http://www.woodmann.com/forum/showthread.php?t=7028 discussion by acidmelt and biblio]

==After Decompression (BGLR)==

Give the decompressed file an extension *BGLR* and it is denoted as *BGLR* file from now on.

Each BGLR file is a collection of records.

Every record has 1 byte specifier:
  * The low nibble is the record type.
  * The high nibble holds indication of the record length, with the following rule:
    # high nibble>=4: subtract 4; that is the length
    # high nibble <4: add 1: that is the number of bytes for the following length (in big-endian format)
    _similar structure is used in term property_
    

So a simple function can do the job:
{{{
# python 3.0 compatible
def readBlock(f):
    hdr=f.read(1)[0]
    high_nibble=hdr>>4
    rec_type=hdr&0xF
    if rec_type==RC_EOF:
        return (rec_type,None)
    
    if high_nibble>=4:
        rec_len=high_nibble-4
    else:
        rec_len=parseInt(f.read(high_nibble+1))
    return (rec_type,f.read(rec_len))
}}}

Currently we know four types of records:
||*Record Type* ||*Value*||
||RC_META       || 0x0   ||
||RC_INFO       || 0x3   ||
||RC_NULL_1       || 0x6   ||
||RC_ENTRY      || 0x1 | 0xA | 0xB ...||
||RC_RES        || 0x2   ||
||RC_NULL_2     || 0x4   ||
||RC_EOF        || 0x5   ||

A bgr file begins with RC_META records followed by RC_INFOs. RC_NULL_1 indicates the end of RC_INFOs and beginning of RC_ENTRYs. RC_RESs follow RC_ENTRYs. The file ends with a RC_NULL_2 and RC_EOF record.<br/>

==Record Structures==

===RC_META===
1 byte of specifier and data next

===RC_INFO===
2 bytes of specifier and data next

===RC_NULL_1===
0 bytes of data

===RC_ENTRY===
see [BGLEntryStructure]